// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified Boolean
  image         String?
  accounts      Account[]
  sessions      Session[] // Optional for WebAuthn support
  Recipes       Recipe[]
  Posts         Post[]
  Reactions     Reaction[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Recipe {
  id          String       @id @default(cuid())
  name        String
  description String
  medias      Media[]
  steps       Step[]
  ingredients Ingredient[]
  ustensils   Ustensil[]
  posts       Post[]
  author      User?        @relation(fields: [authorId], references: [id])
  authorId    String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Step {
  id          String     @id @default(cuid())
  name        String
  description String
  medias      Media[]
  order       Int
  recipe      Recipe     @relation(fields: [recipe_id], references: [id])
  recipe_id   String
  aliments    Aliment[]
  ustensils   Ustensil[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Aliment {
  id          String       @id @default(cuid())
  name        String
  image       Media        @relation(fields: [image_id], references: [id])
  image_id    String       @unique
  steps       Step[]
  ingredients Ingredient[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Ingredient {
  id         String  @id @default(cuid())
  name       String
  quantity   Float
  unit       Unit
  aliment    Aliment @relation(fields: [aliment_id], references: [id])
  aliment_id String
  recipe     Recipe  @relation(fields: [recipe_id], references: [id])
  recipe_id  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Ustensil {
  id          String   @id @default(cuid())
  name        String
  image       Media    @relation(fields: [image_id], references: [id])
  image_id    String   @unique
  description String
  recipes     Recipe[]
  steps       Step[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post {
  id           String     @id @default(cuid())
  content      String
  published    Boolean    @default(false)
  medias       Media[]
  recipe       Recipe?    @relation(fields: [recipeId], references: [id])
  recipeId     String?
  author       User?      @relation(fields: [authorId], references: [id])
  authorId     String?
  repostOf     Post?      @relation("Repost", fields: [repostOfId], references: [id])
  repostOfId   String?    @map("repost_of_id")
  reposts      Post[]     @relation("Repost")
  responseTo   Post?      @relation("Response", fields: [responseToId], references: [id])
  responseToId String?    @map("response_of_id")
  responses    Post[]     @relation("Response")
  reactions    Reaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Reaction {
  id     String       @id @default(cuid())
  type   ReactionType
  post   Post         @relation(fields: [postId], references: [id])
  postId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Media {
  id          String    @id @default(cuid())
  type        MediaType
  src         String
  alt         String
  recipe      Recipe?   @relation(fields: [recipe_id], references: [id])
  recipe_id   String?
  step        Step?     @relation(fields: [step_id], references: [id])
  step_id     String?
  aliment     Aliment?
  aliment_id  String?
  ustensil    Ustensil?
  ustensil_id String?
  post        Post?     @relation(fields: [post_id], references: [id])
  post_id     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum MediaType {
  image
  video
}

enum Unit {
  g
  kg
  l
  cl
  ml
  tsp
  tbsp
  cup
  pinch
  slice
  piece
  bunch
  sprig
  leaf
}

enum ReactionType {
  like
  love
  haha
  wow
  sad
  angry
}